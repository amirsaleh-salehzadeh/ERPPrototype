syntax = "proto3";

option csharp_namespace = "ERP.IdentityService.Contracts";

package identity;

// Identity Service for API Key validation and authentication
service IdentityService {
  // Validate API Key
  rpc ValidateApiKey(ValidateApiKeyRequest) returns (ValidateApiKeyResponse);

  // Create new API Key
  rpc CreateApiKey(CreateApiKeyRequest) returns (CreateApiKeyResponse);

  // Revoke API Key
  rpc RevokeApiKey(RevokeApiKeyRequest) returns (RevokeApiKeyResponse);

  // Get API Key info
  rpc GetApiKeyInfo(GetApiKeyInfoRequest) returns (GetApiKeyInfoResponse);

  // Generate JWT token for service-to-service communication
  rpc GenerateServiceToken(GenerateServiceTokenRequest) returns (GenerateServiceTokenResponse);

  // Generate JWT token for user authentication
  rpc GenerateUserToken(GenerateUserTokenRequest) returns (GenerateUserTokenResponse);

  // Validate JWT token
  rpc ValidateJwtToken(ValidateJwtTokenRequest) returns (ValidateJwtTokenResponse);

  // Get public key for JWT validation
  rpc GetPublicKey(GetPublicKeyRequest) returns (GetPublicKeyResponse);
}

// Request/Response messages for API Key validation
message ValidateApiKeyRequest {
  string api_key = 1;
  string service_name = 2;
  string endpoint = 3;
}

message ValidateApiKeyResponse {
  bool is_valid = 1;
  string user_id = 2;
  string user_name = 3;
  repeated string permissions = 4;
  string error_message = 5;
  int64 expires_at = 6;
}

// Request/Response messages for creating API Keys
message CreateApiKeyRequest {
  string user_name = 1;
  string description = 2;
  repeated string permissions = 3;
  int32 expires_in_days = 4;
}

message CreateApiKeyResponse {
  string api_key = 1;
  string key_id = 2;
  int64 created_at = 3;
  int64 expires_at = 4;
  bool success = 5;
  string error_message = 6;
}

// Request/Response messages for revoking API Keys
message RevokeApiKeyRequest {
  string api_key = 1;
  string key_id = 2;
}

message RevokeApiKeyResponse {
  bool success = 1;
  string message = 2;
}

// Request/Response messages for getting API Key info
message GetApiKeyInfoRequest {
  string api_key = 1;
}

message GetApiKeyInfoResponse {
  string key_id = 1;
  string user_name = 2;
  string description = 3;
  repeated string permissions = 4;
  int64 created_at = 5;
  int64 expires_at = 6;
  bool is_active = 7;
  int32 usage_count = 8;
}

// Request/Response messages for generating service JWT tokens
message GenerateServiceTokenRequest {
  string service_name = 1;
  repeated string permissions = 2;
  int32 expiration_hours = 3; // Optional, defaults to 1 hour
}

message GenerateServiceTokenResponse {
  string jwt_token = 1;
  int64 expires_at = 2;
  bool success = 3;
  string error_message = 4;
}

// Request/Response messages for generating user JWT tokens
message GenerateUserTokenRequest {
  string user_id = 1;
  string user_name = 2;
  repeated string permissions = 3;
  int32 expiration_hours = 4; // Optional, defaults to 8 hours
}

message GenerateUserTokenResponse {
  string jwt_token = 1;
  int64 expires_at = 2;
  bool success = 3;
  string error_message = 4;
}

// Request/Response messages for validating JWT tokens
message ValidateJwtTokenRequest {
  string jwt_token = 1;
}

message ValidateJwtTokenResponse {
  bool is_valid = 1;
  string user_id = 2;
  string user_name = 3;
  string service_name = 4;
  string token_type = 5; // "user" or "service"
  repeated string permissions = 6;
  string error_message = 7;
  int64 expires_at = 8;
  string token_id = 9; // JWT ID (jti claim)
}

// Request/Response messages for getting public key
message GetPublicKeyRequest {
  // Empty request
}

message GetPublicKeyResponse {
  string public_key_pem = 1;
  string key_id = 2;
  bool success = 3;
  string error_message = 4;
}
